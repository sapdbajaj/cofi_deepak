input stream 
Txn [	
		{amount: 1, id: "one", txnDate: "2013-11" }, 
		{amount: -2, id: "two", txnDate: "2014-10"}, 
		{amount: 2, id: "three", txnDate: "2014-10"},
		{amount: -3, id: "four", txnDate: "2014-11"},
		{amount: 6, id: "five", txnDate: "2014-11"},
		{amount: 10, id: "six", txnDate: "2014-11"},
		{amount: -5, id: "seven", txnDate: "2014-11"},
		{amount: 20, id: "eight", txnDate: "2014-11"},
	]

		
Expense [	
		{spent: 0, earned: 1,  txnDate: "2013-11" }, 
		{spent: 2, earned: 2,  txnDate: "2014-10" }, 
		{spent: 8, earned: 36,  txnDate: "2014-11" }
		]
		
using Java8 streams Transform 
List<Txn> to List<Expense> 

List<Txn> = txns; 
txns.stream().collect( // group the stream of txn by year and month
                        Collectors.groupingBy(Txn::getTxnDate, // within each group
                         Collector.of(Expense::new,Expense::add, Expense::combine) // Map Txn to Expense 
                        )
                );

// for generating the average of all 
// 
given txn stream
     group by yyyy-mm // fold 1 
      within group Map to new object Expense(income, spent) 
            if amount > 0 then income+=amt // conditional fold 2.a
            if amount < 0 then spent+=amt // conditional fold 2.b
     